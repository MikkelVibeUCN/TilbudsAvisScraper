@model TilbudsAvisLibrary.DTO.ProductDTO

@{
    ViewData["Title"] = Model.Name;
}

<div class="container">
    <!-- Product Details Section -->
    <div class="row align-items-center mb-4">
        <!-- Product Image -->
        <div class="col-md-4">
            @if (!string.IsNullOrEmpty(Model.ImageUrl))
            {
                <img src="@Model.ImageUrl" alt="@Model.Name" class="img-fluid rounded" />
            }
            else
            {
                <p>Intet billede</p>
            }
        </div>

        <!-- Product Details -->
        <div class="col-md-8">
            <h3>@Model.Name</h3>
            <p>@Model.Description</p>
        </div>
    </div>

    <!-- Base Prices Section -->
    <div class="row mb-4">
        <div class="col-md-12">
            <h4>Normalpriser:</h4>
            <ul>
                @foreach (var price in Model.Prices.Where(p => p.ValidFrom == p.ValidTo))
                {
                    <li>@price.CompanyName: @price.Price kr.</li>
                }
            </ul>
        </div>
    </div>

    <!-- Price History Graph -->
    <div class="row">
        <div class="col-md-12">
            <h4>Prisudvikling</h4>
            <canvas id="priceChart"></canvas>
        </div>
    </div>
    @if (Model.NutritionInfo != null)
    {
        <div class="row mt-4">
            <div class="col-md-12">
                <h4>Næringsindhold per 100 g.</h4>
                <table class="table table-bordered">
                    <tbody>
                        <tr>
                            <td>Energi</td>
                            <td>@Model.NutritionInfo.EnergyKcal Kcal</td>
                        </tr>
                        <tr>
                            <td>Fedt</td>
                            <td>
                                @Model.NutritionInfo.FatPer100G g
                                <br />
                                <small class="text-muted">Mættet fedt: @Model.NutritionInfo.SaturatedFatPer100G g</small>
                            </td>
                        </tr>
                        <tr>
                            <td>Kulhydrater</td>
                            <td>
                                @Model.NutritionInfo.CarbohydratesPer100G g
                                <br />
                                <small class="text-muted">Sukkerarter: @Model.NutritionInfo.SugarsPer100G g</small>
                            </td>
                        </tr>
                        <tr>
                            <td>Fiber</td>
                            <td>@Model.NutritionInfo.FiberPer100G g</td>
                        </tr>
                        <tr>
                            <td>Protein</td>
                            <td>@Model.NutritionInfo.ProteinPer100G g</td>
                        </tr>
                        <tr>
                            <td>Salt</td>
                            <td>@Model.NutritionInfo.SaltPer100G g</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    }



</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    const priceData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
        Model.Prices.Select(p => new
        {
            p.Price,
            ValidFrom = p.ValidFrom?.ToString("yyyy-MM-dd"),
            ValidTo = p.ValidTo?.ToString("yyyy-MM-dd"),
            p.CompanyName
        }))
        );

    // Firma-specifikke farver
    const companyColors = {
        "Rema1000": "#0D2C5D",
        "365 Discount": "#00AA46",
        "Kvickly": "#C31414",
        "Default": "#777777"
    };

    // Filtrer priser ældre end 50 år
    const currentDate = new Date();
    const filteredPrices = priceData.filter(p => {
        const validFromDate = new Date(p.ValidFrom);
        return (currentDate - validFromDate) / (1000 * 60 * 60 * 24 * 365.25) <= 50;
    });

    const companyPrices = filteredPrices.reduce((acc, price) => {
        const company = price.CompanyName || 'Ukendt Firma';
        if (!acc[company]) {
            acc[company] = [];
        }
        acc[company].push({
            price: price.Price,
            date: price.ValidFrom.substring(0, 10),
        });
        return acc;
    }, {});

    const labels = Array.from(new Set(filteredPrices.map(p => p.ValidFrom)))
        .map(dateString => new Date(dateString))
        .sort((a, b) => a - b)
        .map(date => date.toLocaleDateString('da-DK')); // Dansk datoformat

    const datasets = Object.keys(companyPrices).map(company => {
        const data = labels.map(label => {
            const price = companyPrices[company].find(p => new Date(p.date).toLocaleDateString('da-DK') === label);
            return price ? price.price : null;
        });

        return {
            label: company,
            data: data,
            borderColor: companyColors[company] || companyColors['Default'], // Brug firmaets farve eller sort som standard
            backgroundColor: companyColors[company] + "33",
            fill: true,
            tension: 0.1,
            spanGaps: true
        };
    });

    const ctx = document.getElementById('priceChart').getContext('2d');
    const priceChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: datasets
        },
        options: {
            responsive: true,
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'Dato'
                    },
                    ticks: {
                        autoSkip: true,
                        maxTicksLimit: 20
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: 'Pris'
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const elementIndex = elements[0].index;
                    const datasetIndex = elements[0].datasetIndex;
                    const company = priceChart.data.datasets[datasetIndex].label;
                    const date = priceChart.data.labels[elementIndex];
                    redirectToNewspaper(company, date);
                }
            }
        }
    });

    function redirectToNewspaper(company, date) {
        // Her kan du tilføje logik til at hente den korrekte URL fra et endpoint
        const url = `https://example.dk/${company}/${date}`;
        window.location.href = url;
    }

</script>


