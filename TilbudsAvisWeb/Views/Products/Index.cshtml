@model IEnumerable<TilbudsAvisLibrary.DTO.ProductDTO>
@{
    ViewData["Title"] = "Alle tilbud";
    string selectedSortOrder = ViewBag.CurrentSortOrder ?? "";
    string selectedRetailer = ViewBag.CurrentRetailer ?? "";
    int currentPage = ViewBag.CurrentPage ?? 0;
    int totalPages = ViewBag.TotalPages ?? 1;
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
<style>
    .card:hover .card-img-top {
        transform: scale(1.5);
    }
</style>
<form method="get" asp-action="Index">
    <div class="row mb-3">
        <div class="col-md-4">
            <label for="sortOrder">Sorter efter:</label>
            <select id="sortOrder" name="SortBy" class="form-control">
                <option value="nameAsc" selected="@(selectedSortOrder == "nameAsc")">Navn stigende (A-Å)</option>
                <option value="nameDesc" selected="@(selectedSortOrder == "nameDesc")">Navn faldende (Å-A)</option>
                <option value="priceAsc" selected="@(selectedSortOrder == "priceAsc")">Pris stigende</option>
                <option value="priceDesc" selected="@(selectedSortOrder == "priceDesc")">Pris faldene</option>
            </select>
        </div>
        <div class="col-md-4">
            <label for="retailer">Butikker:</label>
            <select id="retailer" name="Retailer" class="form-control">
                <option value="">Alle butikker</option>
                @foreach (var retailer in ViewBag.Grocers as IEnumerable<string>)
                {
                    <option value="@retailer" selected="@(retailer == selectedRetailer)">@retailer</option>
                }
            </select>
        </div>
        <div class="col-md-4 d-flex align-items-end">
            <button type="submit" class="btn btn-primary">Apply</button>
        </div>
    </div>
</form>

<div class="row" id="product-container">
    @foreach (var item in Model)
    {
        <div class="col-6 col-sm-4 col-md-3 col-lg-2 mb-3">
            <div class="card text-center" style="font-size: 0.8rem; border: 1px solid #ddd; height: 170px; display: flex; flex-direction: column; margin: 0 auto; overflow: hidden; position: relative;">
                <a asp-action="Details" asp-route-id="@item.Id" style="text-decoration: none; color: inherit; display: flex; flex-direction: column; height: 100%; padding: 0;">

                    <!-- Product Image -->
                    <div class="card-img-container" style="flex-grow: 1; display: flex; justify-content: center; align-items: center; padding: 10px; box-sizing: border-box; height: 60%; width: 100%; overflow: hidden;">
                        <img class="card-img-top" style="width: 100%; height: 100%; object-fit: contain; transition: transform 0.3s ease;"
                             src="@(string.IsNullOrEmpty(item.ImageUrl) ? "https://storage.googleapis.com/pod_public/1300/163656.jpg" : item.ImageUrl)"
                             alt="@item.Name" />
                    </div>

                    <!-- Product Name and Price -->
                    <div class="card-body p-1" style="display: flex; flex-direction: column; justify-content: flex-end; padding: 0.5rem; text-align: center; flex-shrink: 0;">
                        <!-- Product Name -->
                        <h6 class="card-title mb-1 text-truncate" style="font-size: 0.75rem; margin-bottom: 10px;">
                            @item.Name
                        </h6>

                        <!-- Lowest Product Price -->
                        <p class="card-text mb-0" style="font-size: 0.8rem;">
                            <strong>
                                @if (item.Prices != null && item.Prices.Any())
                                {
                                    @($"{item.Prices.Min().Price} kr.")
                                }
                                else
                                {
                                    <span>Ikke tilgængelig</span>
                                }
                            </strong>
                        </p>
                    </div>
                </a>
            </div>
        </div>
    }
</div>





<div id="loading-indicator" class="text-center mt-3" style="display: none;">
    <i class="bi bi-arrow-clockwise"></i> Henter flere tilbud...
</div>

<div id="notification" class="notification"></div>


@section Scripts {
    <script>
        let currentPage = @currentPage; // Tracks the current page number
        const totalPages = @totalPages; // Total number of pages from the server
        let isLoading = false; // Prevents multiple simultaneous requests

        const loadMoreProducts = async () => {
            if (isLoading || currentPage >= totalPages) return; // Exit if already loading or no more pages

            isLoading = true; // Set flag to prevent multiple requests
            const loadingIndicator = document.getElementById("loading-indicator");
            loadingIndicator.style.display = "block"; // Show loading indicator

            try {
                // Fetch the next set of products
                const response = await fetch(`@Url.Action("Index")?pageNumber=${currentPage + 1}&SortBy=@selectedSortOrder&Retailer=@selectedRetailer`);
                if (response.ok) {
                    const newProductsHtml = await response.text();
                    const container = document.getElementById("product-container");

                    // Append new products
                    const tempDiv = document.createElement("div");
                    tempDiv.innerHTML = newProductsHtml;
                    const newProducts = tempDiv.querySelectorAll(".col-6"); // Adjust selector as needed

                    if (newProducts.length > 0) {
                        newProducts.forEach(product => container.appendChild(product));
                        currentPage++; // Increment the page number
                    }
                } else {
                    console.error("Failed to fetch more products.");
                }
            } catch (error) {
                console.error("Error loading more products:", error);
            } finally {
                isLoading = false; // Reset the flag
                loadingIndicator.style.display = "none"; // Hide loading indicator
            }
        };

        const onScroll = () => {
            const scrollPosition = window.scrollY + window.innerHeight;
            const pageHeight = document.documentElement.scrollHeight;

            if (scrollPosition >= pageHeight - 200) { // Trigger when near the bottom
                loadMoreProducts();
            }
        };

        window.addEventListener("scroll", onScroll);
    </script>
}
